/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BOWTIE2_BUILD_HOST {
        publishDir = [
            path: { "${params.outdir}/bowtie2/build_host" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BOWTIE2_ALIGN_HOST {
        publishDir = [
            path: { "${params.outdir}/bowtie2/align_host" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BOWTIE2_BUILD_ORG {
        publishDir = [
            path: { "${params.outdir}/bowtie2/build_org" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BOWTIE2_ALIGN_ORG {
        publishDir = [
            path: { "${params.outdir}/bowtie2/align_org" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //
    // STAR align
    //

    // Index

    withName: '.*:STAR_HOST:STAR_GENOMEGENERATE' {
        ext.prefix = { "host_index_" }
        publishDir = [
            path: { "${params.outdir}/star_index/host" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:STAR_ORG:STAR_GENOMEGENERATE' {
        ext.prefix = { "org_index_" }
        publishDir = [
            path: { "${params.outdir}/star_index/org" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Host Align

    withName: '.*:STAR_HOST:STAR_ALIGN' {
        publishDir = [
            [
                path: { "${params.outdir}/star_align/align_host/filtered_reads" },
                pattern: "*.unmapped*",
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/star_align/align_host/Logs" },
                pattern: "*Log.*",
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }

    // Target org Align

    withName: '.*:STAR_ORG:STAR_ALIGN' {
        ext.args = '--quantMode GeneCounts'
        publishDir = [
            [
                path: { "${params.outdir}/star_align/align_org/reads_per_gene" },
                pattern: "*.ReadsPerGene.out.tab",
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/star_align/align_org/contamination_reads" },
                pattern: "*.unmapped*",
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/star_align/align_org/Logs" },
                pattern: "*.Log*",
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/star_align/align_org/align_bam" },
                pattern: "*Aligned.out.bam",
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/star_align/align_org/align_bam" },
                pattern: "*SJ.out.tab",
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: 'GUNZIP' {
    container = 'quay.io/nf-core/ubuntu:20.04'}

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}
